{
    "q1": {
        "type": "multiple",
        "question": "\n<p>Which of the following statements regarding the <b>time complexities</b>\nof the <tt>ArraySet</tt> functions are true (select all that apply)?</p>\n",
        "responses": {
            "as_contains_1": "<tt>arrayset_contains</tt> has an average <b>time complexity</b> of <tt>O(1)</tt>",
            "as_contains_logn": "<tt>arrayset_contains</tt> has an average <b>time complexity</b> of <tt>O(logn)</tt>",
            "as_contains_n": "<tt>arrayset_contains</tt> has an average <b>time complexity</b> of <tt>O(n)</tt>",
            "as_add_1": "<tt>arrayset_add</tt> has an average <b>time complexity</b> of <tt>O(1)</tt>",
            "as_add_logn": "<tt>arrayset_add</tt> has an average <b>time complexity</b> of <tt>O(logn)</tt>",
            "as_add_n": "<tt>arrayset_add</tt> has an average <b>time complexity</b> of <tt>O(n)</tt>",
            "as_remove_1": "<tt>arrayset_remove</tt> has an average <b>time complexity</b> of <tt>O(1)</tt>",
            "as_remove_logn": "<tt>arrayset_remove</tt> has an average <b>time complexity</b> of <tt>O(logn)</tt>",
            "as_remove_n": "<tt>arrayset_remove</tt> has an average <b>time complexity</b> of <tt>O(n)</tt>"
        }
    },
    "q2": {
        "type": "multiple",
        "question": "\n<p>Which of the following statements regarding the <b>space complexities</b>\nof the <tt>ArraySet</tt> functions are true (select all that apply)?</p>\n",
        "responses": {
            "as_contains_1": "<tt>arrayset_contains</tt> has an average <b>space complexity</b> of <tt>O(1)</tt>",
            "as_contains_logn": "<tt>arrayset_contains</tt> has an average <b>space complexity</b> of <tt>O(logn)</tt>",
            "as_contains_n": "<tt>arrayset_contains</tt> has an average <b>space complexity</b> of <tt>O(n)</tt>",
            "as_add_1": "<tt>arrayset_add</tt> has an average <b>space complexity</b> of <tt>O(1)</tt>",
            "as_add_logn": "<tt>arrayset_add</tt> has an average <b>space complexity</b> of <tt>O(logn)</tt>",
            "as_add_n": "<tt>arrayset_add</tt> has an average <b>space complexity</b> of <tt>O(n)</tt>",
            "as_remove_1": "<tt>arrayset_remove</tt> has an average <b>space complexity</b> of <tt>O(1)</tt>",
            "as_remove_logn": "<tt>arrayset_remove</tt> has an average <b>space complexity</b> of <tt>O(logn)</tt>",
            "as_remove_n": "<tt>arrayset_remove</tt> has an average <b>space complexity</b> of <tt>O(n)</tt>"
        }
    },
    "q3": {
        "type": "multiple",
        "question": "\n<p>Which of the following statements regarding the <b>time complexities</b>\nof the <tt>ListSet</tt> functions are true (select all that apply)?</p>\n",
        "responses": {
            "ls_contains_1": "<tt>listset_contains</tt> has an average <b>time complexity</b> of <tt>O(1)</tt>",
            "ls_contains_logn": "<tt>listset_contains</tt> has an average <b>time complexity</b> of <tt>O(logn)</tt>",
            "ls_contains_n": "<tt>listset_contains</tt> has an average <b>time complexity</b> of <tt>O(n)</tt>",
            "ls_add_1": "<tt>listset_add</tt> has an average <b>time complexity</b> of <tt>O(1)</tt>",
            "ls_add_logn": "<tt>listset_add</tt> has an average <b>time complexity</b> of <tt>O(logn)</tt>",
            "ls_add_n": "<tt>listset_add</tt> has an average <b>time complexity</b> of <tt>O(n)</tt>",
            "ls_remove_1": "<tt>listset_remove</tt> has an average <b>time complexity</b> of <tt>O(1)</tt>",
            "ls_remove_logn": "<tt>listset_remove</tt> has an average <b>time complexity</b> of <tt>O(logn)</tt>",
            "ls_remove_n": "<tt>listset_remove</tt> has an average <b>time complexity</b> of <tt>O(n)</tt>"
        }
    },
    "q4": {
        "type": "multiple",
        "question": "\n<p>Which of the following statements regarding the <b>space complexities</b>\nof the <tt>ListSet</tt> functions are true (select all that apply)?</p>\n",
        "responses": {
            "ls_contains_1": "<tt>listset_contains</tt> has an average <b>space complexity</b> of <tt>O(1)</tt>",
            "ls_contains_logn": "<tt>listset_contains</tt> has an average <b>space complexity</b> of <tt>O(logn)</tt>",
            "ls_contains_n": "<tt>listset_contains</tt> has an average <b>space complexity</b> of <tt>O(n)</tt>",
            "ls_add_1": "<tt>listset_add</tt> has an average <b>space complexity</b> of <tt>O(1)</tt>",
            "ls_add_logn": "<tt>listset_add</tt> has an average <b>space complexity</b> of <tt>O(logn)</tt>",
            "ls_add_n": "<tt>listset_add</tt> has an average <b>space complexity</b> of <tt>O(n)</tt>",
            "ls_remove_1": "<tt>listset_remove</tt> has an average <b>space complexity</b> of <tt>O(1)</tt>",
            "ls_remove_logn": "<tt>listset_remove</tt> has an average <b>space complexity</b> of <tt>O(logn)</tt>",
            "ls_remove_n": "<tt>listset_remove</tt> has an average <b>space complexity</b> of <tt>O(n)</tt>"
        }
    },
    "q5": {
        "type": "multiple",
        "question": "\n<p>Which of the following statements regarding the <b>time complexities</b>\nof the <tt>is_palindromic</tt> functions in <tt>bin/palindromic</tt> are\ntrue (select all that apply)?</p>\n",
        "responses": {
            "as_n": "<tt>is_palindromic_arrayset</tt> has an average <b>time complexity</b> of <tt>O(n)</tt>",
            "as_nlogn": "<tt>is_palindromic_arrayset</tt> has an average <b>time complexity</b> of <tt>O(nlogn)</tt>",
            "as_n2": "<tt>is_palindromic_arrayset</tt> has an average <b>time complexity</b> of <tt>O(n^2)</tt>",
            "ls_n": "<tt>is_palindromic_listset</tt> has an average <b>time complexity</b> of <tt>O(n)</tt>",
            "ls_nlogn": "<tt>is_palindromic_listset</tt> has an average <b>time complexity</b> of <tt>O(nlogn)</tt>",
            "ls_n2": "<tt>is_palindromic_listset</tt> has an average <b>time complexity</b> of <tt>O(n^2)</tt>",
            "bs_n": "<tt>is_palindromic_bitset</tt> has an average <b>time complexity</b> of <tt>O(n)</tt>",
            "bs_nlogn": "<tt>is_palindromic_bitset</tt> has an average <b>time complexity</b> of <tt>O(nlogn)</tt>",
            "bs_n2": "<tt>is_palindromic_bitset</tt> has an average <b>time complexity</b> of <tt>O(n^2)</tt>"
        }
    },
    "q6": {
        "type": "blank",
        "question": "\n<p>For each of the following words, fill in \"YEAH\" if it has a\n<b>palindromic permutation</b> or \"NOPE\" if it does not.</p>\n\n<ol>\n<li><b>Palindromic Permutation?</b>: <tt>annnanaaannnnaaaannnaaannnanaannana</tt> ____</li>\n<li><b>Palindromic Permutation?</b>: <tt>wowowowowowwwwwooooooowwwwooowwowow</tt> ____</li>\n</ol>\n"
    },
    "q7": {
        "type": "multiple",
        "question": "\n<p>Add the <tt>-O2</tt> compiler flag to your <tt>Makefile</tt> and then\nrebuild everything with <tt>make clean ; make</tt>.  Next, run the provided\n<tt>bin/benchmark.py</tt> script to measure the runtimes of the various\n<b>set</b> types in <tt>bin/palindromic</tt>.  Perform this measurement a\nfew times until a pattern emerges.</p>\n\n<p>Which of the following statements are true (select all that apply)?</p>\n",
        "responses": {
            "arrayset_fastest": "<tt>ArraySet</tt> is the <b>fastest</b>.",
            "listset_fastest": "<tt>ListSet</tt> is the <b>fastest</b>.",
            "bitset_fastest": "<tt>BitSet</tt> is the <b>fastest</b>.",
            "as_ls_same": "<tt>ArraySet</tt> and <tt>ListSet</tt> are <b>close in speed</b>.",
            "as_bs_same": "<tt>ArraySet</tt> and <tt>BitSet</tt> are <b>close in speed</b>.",
            "ls_bs_same": "<tt>ListSet</tt> and <tt>BitSet</tt> are <b>close in speed</b>."
        }
    }
}
